const path = require('path');
const sass = require('node-sass');

module.exports = function (grunt) {
  const DEV_DIR = path.resolve(__dirname, 'front');
  const SRC_DIR = path.resolve(__dirname, 'src');

  /* jshint camelcase: false */
  // Time how long tasks take
  require('time-grunt')(grunt);

  // Automatically load required grunt tasks
  require('jit-grunt')(grunt);

  // Read main files from bower.json overrides object
  function getMainFilesFrom(overrides) {
    let result = {};

    for (let key in overrides) {
      // skip loop if the property is from prototype
      if (!overrides.hasOwnProperty(key)) continue;
      var obj = overrides[key];

      for (let prop in obj) {
        // skip loop if the property is from prototype
        if (!obj.hasOwnProperty(prop)) continue;
        if (prop === 'main') {
          result[key] = obj[prop];
        }
      }
    }
    return result;
  }

  // Project configuration
  grunt.initConfig({
    babel: {
      options: {
        sourceMap: true,
        presets: ["es2015"]
      },
      dev: {
        files: [{
          expand: true,
          cwd: `${SRC_DIR}/scripts/`,
          src: ['**/*.js'],
          dest: `${DEV_DIR}/scripts/`,
          ext: '.js',
          extDot: 'last',
        }]
      },
    },

    'http-server': {
      'dev': {
        root: DEV_DIR,
        port: 8282,
        host: "localhost",
        showDir : true,
        autoIndex: true,
        ext: "html",
        runInBackground: true,
        openBrowser : true,
        logFn: function(req, res, error) {
          error && console.error(error);
        },
      }
    },

    copy: {
      dev: {
        files: [
          {expand: true, cwd: `${SRC_DIR}/`, src: ['*.html'], dest: `${DEV_DIR}/`},
          {expand: true, cwd: `${SRC_DIR}/images/`, src: ['**'], dest: `${DEV_DIR}/images/`},
          {expand: true, cwd: `${SRC_DIR}`, src: ['favicon.ico'], dest: `${DEV_DIR}/`}
        ]
      },
    },

    // Compiles Sass to CSS and generates necessary files if requested
    sass: {
      dev: {
        options: {
          sourceMap: false,
          outputStyle: 'expanded',
          imagePath: '../images',
          implementation: sass,
        },
        files: {
          [`${DEV_DIR}/styles/main.css`]: `${SRC_DIR}/styles/main.scss`,
          [`${DEV_DIR}/styles/print.css`]: `${SRC_DIR}/styles/print.scss`,
        }
      }
    },

    // Globbing for Sass
    sass_globbing: {
      blocks: {
        files: {
          [`${SRC_DIR}/styles/_blocks.scss`]: `${SRC_DIR}/styles/blocks/**/*.scss`
        },
        options: {
          useSingleQuotes: false,
          signature: '// This file is generated by a \'grunt-sass-globbing\' plugin.' +
          ' Please, do NOT edit it!'
        }
      }
    },

    // Watches files for changes and runs tasks based on the changed files
    watch: {
      js: {
        files: [`${SRC_DIR}/scripts/**/*.js`],
        tasks: ['babel:dev', 'copy:dev'],
      },
      sass: {
        files: [`${SRC_DIR}/styles/**/*.scss`],
        tasks: ['sass_globbing', 'sass:dev', 'copy:dev'],
      },
      images: {
        files: [`${SRC_DIR}/images/**/*.*`],
        tasks: ['copy:dev'],
      },
      pages: {
        files: [`${SRC_DIR}/*.html`],
        tasks: ['copy:dev'],
      },
    }
  });

  // Force load tasks which can not be loaded by 'jit-grunt'
  grunt.loadNpmTasks('grunt-notify');
  grunt.loadNpmTasks('grunt-force-task');
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-http-server');

  grunt.registerTask('build-dev', [
    'sass_globbing',
    'sass:dev',
    'babel:dev',
    'copy:dev',
  ]);

  // Register defult task
  grunt.registerTask('default', [
    'build-dev',
    'http-server',
    'watch',
  ]);
};
